#
# 1. Create source-replica topolgy.
include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
#
# 2. Setup testing environment.
#    2.1. Create table on source and insert few rows.
#    2.2. Setup necessary variables on replica server.
CREATE TABLE t1(c1 INT PRIMARY KEY, c2 INT, INDEX(c2)) ENGINE = InnoDB;
INSERT INTO t1 VALUES(1, NULL),(2, 2), (3, NULL), (4, 4), (5, NULL), (6, 6);
include/sync_slave_sql_with_master.inc
include/stop_slave_sql.inc
SET @saved_slave_parallel_type = @@GLOBAL.slave_parallel_type;
SET @saved_slave_parallel_workers = @@GLOBAL.slave_parallel_workers;
SET @saved_slave_preserve_commit_order = @@GLOBAL.slave_preserve_commit_order;
SET @saved_innodb_lock_wait_timeout = @@GLOBAL.innodb_lock_wait_timeout;
SET @saved_slave_transaction_retries = @@GLOBAL.slave_transaction_retries;
SET GLOBAL slave_transaction_retries = 0;
SET GLOBAL slave_parallel_type = "LOGICAL_CLOCK";
SET GLOBAL slave_parallel_workers = 3;
SET GLOBAL slave_preserve_commit_order = ON;
SET GLOBAL innodb_lock_wait_timeout = 1000;
#
# 3. Execute transactions on source server that would generate deadlock on the
#    replica server.
[connection master]
INSERT INTO t1 VALUES(10, 10);
# Adding debug point 'set_commit_parent_100' to @@GLOBAL.debug
INSERT INTO t1 VALUES(11, NULL);
DELETE FROM t1 WHERE c2 <= 3;
INSERT INTO t1 VALUES(15, 15);
# Removing debug point 'set_commit_parent_100' from @@GLOBAL.debug
[connection slave]
BEGIN;
INSERT INTO t1 VALUES(11, 11);
[connection slave1]
# Adding debug point 'halt_slave_worker_3' to @@GLOBAL.debug
include/start_slave_sql.inc
SET DEBUG_SYNC = 'now WAIT_FOR signal.w3.wait_for_its_turn';
[connection slave]
ROLLBACK;
SET DEBUG_SYNC = 'now SIGNAL go_ahead_w3';
SET DEBUG_SYNC = 'RESET';
# 4. Wait till server to handle the deadlock and till the co-ordinator
#    thread to error out with ER_MTS_INCONSISTENT_DATA.
include/wait_for_slave_sql_error.inc [errno=1756]
# Removing debug point 'halt_slave_worker_3' from @@GLOBAL.debug
#
# 5. Restart replication threads, sync the replica and verify that table
#    data is consistent.
include/start_slave_sql.inc
[connection master]
include/sync_slave_sql_with_master.inc
include/rpl_diff.inc
#
# 6. Cleanup.
[connection slave]
include/stop_slave_sql.inc
SET GLOBAL slave_transaction_retries = @saved_slave_transaction_retries;
SET GLOBAL slave_parallel_type = @saved_slave_parallel_type;
SET GLOBAL slave_parallel_workers = @saved_slave_parallel_workers;
SET GLOBAL slave_preserve_commit_order = @saved_slave_preserve_commit_order;
SET GLOBAL innodb_lock_wait_timeout = @saved_innodb_lock_wait_timeout;
include/start_slave_sql.inc
CALL mtr.add_suppression("Consider raising the value of the slave_transaction_retries variable");
CALL mtr.add_suppression("Deadlock found when trying to get lock; try restarting transaction");
CALL mtr.add_suppression("The slave coordinator and worker threads are stopped, possibly leaving data in inconsistent state.");
[connection master]
DROP TABLE t1;
include/rpl_end.inc
